#!/usr/bin/env bash
### ----------------- Bootstrap post-installation scripts ----------------- ###
# Run by run_dotfile_scripts in bootstrap.sh
# Scripts must be executable (chmod +x)
echo "-> Running strap-after-setup. Some steps may require password entry."

### Configure macOS
if [ "${MACOS:-0}" -gt 0 ] || [ "$(uname)" = "Darwin" ]; then
  "$HOME"/.dotfiles/scripts/macos.sh
else
  echo "Not macOS. Skipping macos.sh."
fi

### Install VSCode extensions
for i in {code,code-exploration,code-insiders,code-server,codium}; do
  "$HOME"/.dotfiles/scripts/vscode-extensions.sh "$i"
done

### Set shell
if ! [[ $SHELL =~ "zsh" ]] && command -v zsh &>/dev/null; then
  echo "--> Changing shell to Zsh. Password entry required."
  [ "${LINUX:-0}" -gt 0 ] || [ "$(uname)" = "Linux" ] &&
    command -v zsh | sudo tee -a /etc/shells
  sudo chsh -s "$(command -v zsh)" "$USER"
else
  echo "Shell is already set to Zsh."
fi

### ----------------- Custom setup of other packages ----------------- ###

# # Install node js and n using n-install script
# set -i                                   # turn on interactive mode to handle potential problem
# Install node.js and n automatically
# curl -L https://bit.ly/n-install | N_PREFIX=~/util/n bash -s -- -y
# shellcheck source=/Users/timotheos/.config/zsh/.zshrc
# source "$HOME/.config/zsh/.zshrc"        # reload (source) the initialization file
# set +i                                   # turn interactive mode back off
# NOTE: N-install may add duplicate config code to .zshrc (and may append rather than prepend to PATH)

# Download the git script for fzf
git clone git@github.com:junegunn/fzf-git.sh.git ~/.local/bin

# This has to be applied after brew has installed cask logi-options-plus
patch /Library/Application\ Support/Logitech.localized/LogiOptionsPlus/app_permissions.json <./app_permissions.json.diff

# Point git to config file within repo containing path to custom githooks directory
git config --local include.path ../.gitconfig

# Download and build Zeal (execute after dependencies (eg. qt) are installed by Brewfile)
CMAKE_PREFIX_PATH="$(brew --prefix qt@6):$(brew --prefix libarchive):$(brew --prefix vulkan-headers)"
export CMAKE_PREFIX_PATH
git clone https://github.com/zealdocs/zeal.git "$DEVFILES/git_repos/package_repos/zealdocs"
cd "$DEVFILES/git_repos/package_repos/zealdocs/zeal" || exit
mkdir build
cmake -S . -B build
cmake --build build --config Release --parallel
cp -Rp build/Zeal.app /Applications/
cd "$DOTFILES/scripts" || exit
stow --target "$HOME" "$DOTFILES/scripts/zeal"

# Before configuring pinentry-touchid, configure pinentry-mac to use the Keychain at least once
sed -i '' -e "s|^pinentry-program.*|pinentry-program $HOMEBREW_PREFIX/bin/pinentry-mac|" "$DOTFILES/gnupg/.gnupg/gpg-agent.conf"
gpgconf --kill gpg-agent

# NOTE: Manual steps to enable pinentry-touchid (ref: https://bit.ly/3yWLvHq)
# 1. Use pinentry-mac once (select "save in keychain" and "always allow"):
# echo 1234 | gpg -as -
# 2. Update gpg-agent.conf to point to pinentry-touchid binary:
# sed -i '' -e "s|^pinentry-program.*|pinentry-program $HOMEBREW_PREFIX/bin/pinentry-touchid|" "$DOTFILES/gnupg/.gnupg/gpg-agent.conf"
# 3. Restart GPG agent after change to config file:
# gpgconf --kill gpg-agent
# 4. Let pinentry-touchid manage keychain instead of pinentry-mac:
# defaults write org.gpgtools.common DisableKeychain -bool yes
# 5. Ensure pinentry-mac is default (fallback for pinentry-touchid)
# /usr/local/bin/pinentry-touchid -fix

# NOTE: Apps to install manually:
# - Goldendict-ng
